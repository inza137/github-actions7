name: Job Outputs Demo Workflow

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

jobs:
  create_data_and_set_outputs:
    name: "1. Generate Data & Define Outputs"
    runs-on: ubuntu-latest
    
    # Define the outputs that this job will produce
    outputs:
      # 'generated_file_path' is the name of the job output
      # Its value comes from the 'csv_path' output of the step with id 'file_check_step'
      generated_file_path: ${{ steps.file_check_step.outputs.csv_path_output }}
      status_message: ${{ steps.file_check_step.outputs.message_output }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip' # Optional: Caches pip dependencies

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python script to generate CSV
        run: python src/main.py # This script should create 'data/processed_output.csv'

      - name: Check CSV and set step outputs
        id: file_check_step # This step needs an 'id' to be referenced in job outputs
        shell: bash
        run: |
          EXPECTED_CSV="data/processed_output.csv" # Define the expected path
          
          if [ -f "$EXPECTED_CSV" ]; then
            echo "✅ CSV file found at $EXPECTED_CSV"
            # Set step outputs using $GITHUB_OUTPUT
            # These names (csv_path_output, message_output) are specific to this step's outputs
            echo "csv_path_output=$EXPECTED_CSV" >> $GITHUB_OUTPUT
            echo "message_output=CSV file '$EXPECTED_CSV' generated successfully." >> $GITHUB_OUTPUT
          else
            echo "❌ CSV file NOT found at $EXPECTED_CSV"
            echo "csv_path_output=not_found" >> $GITHUB_OUTPUT
            echo "message_output=CSV file generation failed or file '$EXPECTED_CSV' not found." >> $GITHUB_OUTPUT
            # Optionally, you could fail the job here if the file is critical:
            # exit 1 
          fi

  consume_job_outputs:
    name: "2. Consume & Use Job Outputs"
    runs-on: ubuntu-latest
    needs: create_data_and_set_outputs # This job depends on the first job

    steps:
      - name: Display outputs from 'create_data_and_set_outputs' job
        run: |
          echo "Output 1 (File Path): ${{ needs.create_data_and_set_outputs.outputs.generated_file_path }}"
          echo "Output 2 (Status Message): ${{ needs.create_data_and_set_outputs.outputs.status_message }}"

      - name: Conditional step based on 'generated_file_path'
        # This step only runs if 'generated_file_path' is not 'not_found'
        if: ${{ needs.create_data_and_set_outputs.outputs.generated_file_path != 'not_found' }}
        run: |
          echo "🎉 Success! The CSV file path is: ${{ needs.create_data_and_set_outputs.outputs.generated_file_path }}"
          echo "This information could be used to name an artifact or trigger further processing logic."
          echo "Remember: this is the *path string* from the previous job's runner. To access the file itself, you'd typically use artifacts."

      - name: Conditional step based on 'status_message'
        # This step only runs if the status message contains the word 'successfully'
        if: ${{ contains(needs.create_data_and_set_outputs.outputs.status_message, 'successfully') }}
        run: |
          echo "👍 The status message from the previous job confirms success: '${{ needs.create_data_and_set_outputs.outputs.status_message }}'"

      - name: Handling the 'file not found' case
        if: ${{ needs.create_data_and_set_outputs.outputs.generated_file_path == 'not_found' }}
        run: |
          echo "⚠️ The first job reported that the CSV file was not found."
          echo "Status message was: '${{ needs.create_data_and_set_outputs.outputs.status_message }}'"
          echo "This job might now perform cleanup, send a notification, or skip further steps."