name: Env Vars, Secrets & Environments Demo

# Allow manual triggering from the Actions tab
on:
  workflow_dispatch:

# Workflow-level environment variables are available to all jobs and steps
env:
  WORKFLOW_LEVEL_GREETING: "Hello from the Workflow Level!"
  SHARED_CONFIG_PATH: "/etc/global_config.conf" # Example shared config path
  MY_VAR: "I am set at WORKFLOW level"

jobs:
  explore_variables_and_repo_secrets:
    name: "1. Variables & Repository Secrets"
    runs-on: ubuntu-latest

    # Job-level environment variables are available to all steps in this job
    # They override workflow-level variables with the same name for this job.
    env:
      JOB_LEVEL_INFO: "This is specific to Job 1."
      MY_VAR: "I am set at JOB level (overrides workflow)"

    steps:
      - name: Display Default GitHub Environment Variables
        run: |
          echo "== Default GitHub Variables =="
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Commit SHA: $GITHUB_SHA (May be a merge commit for PRs)"
          echo "Triggering Actor: $GITHUB_ACTOR"
          echo "Event Name: $GITHUB_EVENT_NAME"
          echo "Runner OS: $RUNNER_OS"

      - name: Display Custom Environment Variables (Workflow & Job)"
        run: |
          echo "== Custom Env Vars (Workflow & Job) =="
          echo "Workflow Greeting: $WORKFLOW_LEVEL_GREETING"
          echo "Shared Config Path: $SHARED_CONFIG_PATH"
          echo "Job Level Info: $JOB_LEVEL_INFO"
          echo "MY_VAR (should be Job Level): $MY_VAR"

      - name: Demonstrate Step-Level Env Variable & Precedence
        # Step-level environment variables override job and workflow variables with the same name FOR THIS STEP ONLY.
        env:
          STEP_SPECIFIC_DATA: "Only for this step!"
          MY_VAR: "I am set at STEP level (overrides job & workflow for this step)"
        run: |
          echo "== Step-Level Env Vars & Precedence =="
          echo "Step Specific Data: $STEP_SPECIFIC_DATA"
          echo "MY_VAR (should be Step Level): $MY_VAR"
          echo "Workflow Greeting (still accessible): $WORKFLOW_LEVEL_GREETING"
          echo "Job Level Info (still accessible): $JOB_LEVEL_INFO"

      - name: Check MY_VAR after step override
        run: |
          echo "== MY_VAR after step-level override step =="
          # MY_VAR will revert to the Job-level value here, as the step-level env was local to the previous step.
          echo "MY_VAR (should be Job Level again): $MY_VAR"

      - name: Use a Repository Secret
        env:
          # Secrets are passed as environment variables to the step
          # Their values are masked if printed to the log.
          MY_SECRET_AS_ENV_VAR: ${{ secrets.MY_FIRST_REPO_SECRET }}
        run: |
          echo "== Repository Secret Demo =="
          echo "Attempting to use repository secret 'MY_FIRST_REPO_SECRET'..."
          if [ -z "$MY_SECRET_AS_ENV_VAR" ]; then
            echo "⚠️ MY_FIRST_REPO_SECRET is not set or empty."
            echo "Please ensure you've created it in Repository Settings > Secrets and variables > Actions."
          else
            # The actual value will be masked as '***' in the logs by GitHub Actions
            echo "Value of MY_FIRST_REPO_SECRET (as env var): $MY_SECRET_AS_ENV_VAR"
            echo "Using it in a mock command: my_tool --api-key $MY_SECRET_AS_ENV_VAR"
            echo "Notice how the secret value is masked in the output above if printed."
          fi

  use_github_environment:
    name: "2. Using a GitHub Environment"
    runs-on: ubuntu-latest
    needs: explore_variables_and_repo_secrets # Ensures this job runs after the first one

    # Associate this job with the 'development' environment you created
    environment:
      name: development
      url: https://my-dev-app.example.com # Optional: A URL to display for the environment

    steps:
      - name: Display Info & Access Environment-Specific Secret and Variable
        # Environment-specific secrets and variables are available via the 'secrets' and 'vars' contexts
        env:
          DEV_API_KEY_FROM_SECRET: ${{ secrets.DEV_ENVIRONMENT_API_KEY }}
          DEV_URL_FROM_VAR: ${{ vars.DEV_SERVER_URL }} # Accessing environment variable
        run: |
          echo "== GitHub Environment Demo =="
          echo "This job is configured for the 'development' environment."
          echo "Deployment URL (from workflow): ${{ job.environment.url }}" # Accessing the configured URL
          echo "---"
          echo "Attempting to use environment secret 'DEV_ENVIRONMENT_API_KEY'..."
          if [ -z "$DEV_API_KEY_FROM_SECRET" ]; then
            echo "⚠️ DEV_ENVIRONMENT_API_KEY is not set for the 'development' environment."
            echo "Please add it in Settings > Environments > development > Environment secrets."
          else
            echo "Value of DEV_ENVIRONMENT_API_KEY (masked): $DEV_API_KEY_FROM_SECRET"
            echo "Mock usage: deploy_to_dev_server --key $DEV_API_KEY_FROM_SECRET"
          fi
          echo "---"
          echo "Attempting to use environment variable 'DEV_SERVER_URL'..."
          if [ -z "$DEV_URL_FROM_VAR" ]; then
            echo "⚠️ DEV_SERVER_URL is not set for the 'development' environment."
            echo "Please add it in Settings > Environments > development > Environment variables."
          else
            # Regular environment variables (from 'vars' context) are NOT masked
            echo "Value of DEV_SERVER_URL: $DEV_URL_FROM_VAR" 
            echo "Mock usage: connect_to_server $DEV_URL_FROM_VAR"
          fi
          echo "---"
          # Workflow-level env vars are still accessible
          echo "Workflow Greeting (still accessible): $WORKFLOW_LEVEL_GREETING"
          # Job-level env vars for *this* job (if any were defined) would also be accessible.
          # Secrets from the repository level are also generally accessible unless overridden by an environment secret of the same name.

      - name: Info about Environment Protection Rules
        run: |
          echo "ℹ️ INFO: The 'development' environment could be configured with protection rules."
          echo "For example, you could require a manual approval before this job runs, or restrict deployments to specific branches."
          echo "These are configured in Settings > Environments > development."